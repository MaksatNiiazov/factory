# Generated by Django 4.2 on 2023-10-11 13:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def populate_nominal_diameter(apps, schema_editor):
    NominalDiameter = apps.get_model('catalog', 'NominalDiameter')
    dns = [6, 8, 10, 15, 20, 25, 32, 40, 50, 65, 80, 100, 125, 150, 200, 250, 300, 350, 400, 450, 500,
           600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200,
           2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000]
    count = 0
    for dn in dns:
        instance = NominalDiameter(dn=dn)
        instance.save()
        count += 1
    print(f"Создано {count} номинальных диаметров")


def delete_nominal_diameters(apps, schema_editor):
    NominalDiameter = apps.get_model('catalog', 'NominalDiameter')
    count = 0
    for item in NominalDiameter.objects.all():
        item.delete()
        count += 1
    print(f"Удалено {count} номинальных диаметров")


def populate_new_pipediameter(apps, schema_editor):
    NominalDiameter = apps.get_model('catalog', 'NominalDiameter')
    NewPipeDiameter = apps.get_model('catalog', 'NewPipeDiameter')
    items = [[6, None, 1, 10.2], [6, None, 2, 10.2],
             [8, None, 1, 13.5], [8, None, 2, 13.5],
             [10, None, 1, 14], [10, None, 2, 17.2],
             [15, None, 1, 18], [15, None, 2, 21.3],
             [20, None, 1, 25], [20, None, 2, 26.9],
             [25, None, 1, 32], [25, None, 2, 33.7],
             [32, None, 1, 38], [32, None, 2, 42.4],
             [40, None, 1, 45], [40, None, 2, 48.3],
             [50, None, 1, 57], [50, None, 2, 60.3],
             [65, None, 1, 76], [65, None, 2, 76.1],
             [80, None, 1, 89], [80, None, 2, 88.9],
             [100, 1, 1, 108], [100, 2, 1, 114], [100, None, 2, 114.3],
             [125, 1, 1, 133], [125, 2, 1, 140], [125, None, 2, 139.7],
             [150, 1, 1, 152], [150, 2, 1, 159], [150, 3, 1, 168], [150, None, 2, 168.3],
             [200, None, 1, 219], [200, None, 2, 219.1],
             [250, None, 1, 273], [250, None, 2, 273],
             [300, None, 1, 325], [300, None, 2, 323],
             [350, None, 1, 377], [350, None, 2, 355],
             [400, None, 1, 426], [400, None, 2, 406],
             [450, None, 1, 478], [450, None, 2, 457],
             [500, None, 1, 530], [500, None, 2, 530],
             [600, None, 1, 630], [600, None, 2, 630],
             [700, None, 1, 720], [700, None, 2, 711],
             [800, None, 1, 820], [800, None, 2, 813],
             [900, None, 1, 920], [900, None, 2, 914],
             [1000, None, 1, 1020], [1000, None, 2, 1016],
             [1100, None, 1, 1120], [1100, None, 2, 1120],
             [1200, None, 1, 1220], [1200, None, 2, 1220],
             [1300, None, 1, 1320], [1300, None, 2, 1320],
             [1400, None, 1, 1420], [1400, None, 2, 1420],
             [1500, None, 1, 1520], [1500, None, 2, 1520],
             [1600, None, 1, 1620], [1600, None, 2, 1620],
             [1700, None, 1, 1720], [1700, None, 2, 1720],
             [1800, None, 1, 1820], [1800, None, 2, 1820],
             [1900, None, 1, 1920], [1900, None, 2, 1920],
             [2000, None, 1, 2020], [2000, None, 2, 2020],
             [2100, None, 1, 2120], [2100, None, 2, 2120],
             [2200, None, 1, 2220], [2200, None, 2, 2220],
             [2300, None, 1, 2320], [2300, None, 2, 2320],
             [2400, None, 1, 2420], [2400, None, 2, 2420],
             [2500, None, 1, 2520], [2500, None, 2, 2520],
             [2600, None, 1, 2620], [2600, None, 2, 2620],
             [2700, None, 1, 2720], [2700, None, 2, 2720],
             [2800, None, 1, 2820], [2800, None, 2, 2820],
             [2900, None, 1, 2920], [2900, None, 2, 2920],
             [3000, None, 1, 3020], [3000, None, 2, 3020],
             ]
    count = 0
    for item in items:
        instance = NewPipeDiameter(dn=NominalDiameter.objects.get(dn=item[0]),
                                   option=item[1],
                                   standard=item[2],
                                   size=item[3])
        instance.save()
        count += 1
    print(f"Создано {count} номинальных диаметров труб с размерами")


def delete_new_pipediameters(apps, schema_editor):
    NewPipeDiameter = apps.get_model('catalog', 'NewPipeDiameter')
    count = 0
    for item in NewPipeDiameter.objects.all():
        item.delete()
        count += 1
    print(f"Удалено {count} номинальных диаметров труб с размерами")


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0012_alter_pipediameter_dn_ru'),
    ]

    operations = [
        migrations.CreateModel(
            name='NominalDiameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dn', models.PositiveSmallIntegerField(unique=True, verbose_name='Номинальный диаметр')),
            ],
            options={
                'verbose_name': 'Номинальный диаметр',
                'verbose_name_plural': 'Номинальные диаметры',
                'ordering': ['dn'],
            },
        ),
        migrations.RunPython(populate_nominal_diameter, delete_nominal_diameters),
        migrations.CreateModel(
            name='NewPipeDiameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.PositiveSmallIntegerField(blank=True, choices=[(None, '--------'), (1, 'A'), (2, 'Б'), (3, 'В')], null=True, verbose_name='Исполнение')),
                ('standard', models.PositiveSmallIntegerField(choices=[(1, 'РФ'), (2, 'EN')], verbose_name='Стандарт')),
                ('size', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Фактический размер, мм')),
                ('dn', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='catalog.nominaldiameter', verbose_name='Номинальный диаметр')),
            ],
            options={
                'verbose_name': 'Номинальный диаметр трубы',
                'verbose_name_plural': 'Номинальные диаметры труб',
                'ordering': ["standard", "dn"],
            },
        ),
        migrations.AddConstraint(
            model_name='newpipediameter',
            constraint=models.UniqueConstraint(fields=('dn', 'option', 'standard'), name='unique_pipe_diameter'),
        ),
        migrations.RunPython(populate_new_pipediameter, delete_new_pipediameters),
    ]
