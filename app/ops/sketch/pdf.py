import base64
import tempfile
from datetime import date, datetime

import pytz
from django.contrib.staticfiles import finders
from fpdf import FPDF

from ops.models import TemporaryComposition, DetailType
from ops.utils import work_with_image, calculate_image_position

WIDTH = 420
HEIGHT = 297


def get_witzenmann_logo():
    base64_logo = ''

    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_file:
        logo_bytes = base64.b64decode(base64_logo)
        tmp_file.write(logo_bytes)

    return tmp_file.name


def get_comment(project_item):
    comment = project_item.comment

    if comment:
        return comment.strip()

    return ''


def get_specification_position(obj):
    position = obj.position
    return str(position)


def get_specification_count(obj):
    count = obj.count
    return str(count)


def get_specification_name(obj):
    name = obj.name

    if name:
        return name.strip()

    return ''


def get_specification_material(obj):
    material = obj.material

    if material:
        return str(obj.material)

    return ''


def get_specification_weight(obj):
    weight = obj.weight

    if not weight:
        return ''

    return str(round(weight, 2))


def get_nominal_diameter(project_item):
    if not project_item.nominal_diameter:
        return '-'

    return str(project_item.nominal_diameter.dn.dn)


def get_nominal_diameter_size(project_item):
    if not project_item.nominal_diameter:
        return '-'

    return str(project_item.nominal_diameter.size)


def get_insulation_thickness(project_item):
    if not project_item.insulation_thickness:
        return '0'

    return str(round(project_item.insulation_thickness, 2))


def get_ambient_temperature(project_item):
    if not project_item.ambient_temperature:
        return '0'

    return str(project_item.ambient_temperature)


def get_float(project_item, field_name, default='', round_digits=2):
    value = getattr(project_item, field_name)

    if not value:
        return default

    if round_digits is not None:
        return str(round(value, round_digits))
    else:
        return str(value)


def get_int(project_item, field_name, default=''):
    value = getattr(project_item, field_name)

    if not value:
        return default

    return str(value)


def get_str(value, default=''):
    if value:
        return value.strip()
    else:
        return default


def calculate_scaled_dimensions(image_width, image_height, max_width_pixels=512, max_height_pixels=680, initial_dpi=72):
    image_width = float(image_width)
    image_height = float(image_height)

    # Исходные физические размеры
    w_mm = image_width / initial_dpi * 25.4
    h_mm = image_height / initial_dpi * 25.4

    # Если размер уже подходит
    if image_width <= max_width_pixels and image_height <= max_height_pixels:
        return image_width, image_height, w_mm, h_mm, image_width, image_height

    # Вычисление масштаба
    scale_w = max_width_pixels / image_width
    scale_h = max_height_pixels / image_height
    scale = min(scale_w, scale_h)
    dpi_new = initial_dpi / scale

    # Новый размер в пикселях
    new_width = round(image_width * scale)
    new_height = round(image_height * scale)

    w_mm = image_width / dpi_new * 25.4
    h_mm = image_height / dpi_new * 25.4

    return image_width, image_height, w_mm, h_mm, new_width, new_height


def draw_main(pdf, project_item, double, field_name="sketch", coords_field_name="sketch_coords"):
    sketch_path = project_item.original_item.variant.generate_sketch(
        project_item.original_item,
        field_name=field_name,
        coords_field_name=coords_field_name,
    )
    image_data = work_with_image(sketch_path, project_item, double, coords=(90, 120))
    sketch_path = image_data['sketch']

    if project_item.original_item.variant.subsketch:
        subsketch_path = project_item.original_item.variant.generate_sketch(
            project_item.original_item,
            field_name='subsketch',
            coords_field_name='subsketch_coords',
        )
        subimage_data = work_with_image(subsketch_path, project_item, False, coords=(300, 50))
        subsketch_path = subimage_data['sketch']
    else:
        subsketch_path = None

    # Рисуем внешнюю границу с отступом 5 мм
    pdf.set_line_width(0.2)
    pdf.set_draw_color(0, 0, 0)
    pdf.rect(5, 5, WIDTH - 10, HEIGHT - 10)

    # Рисуем внутреннюю границу с отступом 1 см от внешней
    pdf.rect(10, 10, WIDTH - 20, HEIGHT - 20)

    # Линия в центре вертикально (с отступом 1 см сверху, длина 2 см вниз)
    pdf.line(WIDTH / 2, 5, WIDTH / 2, 15)

    # Линия в центре горизонтально (с отступом 1 см слева, длина 2 см вправо)
    pdf.line(5, HEIGHT / 2, 15, HEIGHT / 2)

    # Добавляем изображение sketch_path на 5 см слева, 5 см сверху
    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_file:
        tmp_file.write(base64.b64decode(sketch_path))
        tmp_image_path = tmp_file.name

    w, h, w_mm, h_mm, new_width, new_height = calculate_scaled_dimensions(image_data['image_width'], image_data['image_height'])
    x, y = calculate_image_position(new_width, new_height, 90, 120)
    pdf.image(tmp_image_path, x=x, y=y, w=w_mm, h=h_mm)

    # Если есть subsketch_path, добавляем его справа 10 см сверху 5 см
    if subsketch_path:
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_file:
            tmp_file.write(base64.b64decode(subsketch_path))
            tmp_image_path = tmp_file.name
        w, h, w_mm, h_mm, new_width, new_height = calculate_scaled_dimensions(subimage_data['image_width'], subimage_data['image_height'], max_width_pixels=480, max_height_pixels=638)
        x, y = calculate_image_position(new_width, new_height, 300, 50)
        pdf.image(tmp_image_path, x=x, y=y, w=w_mm, h=h_mm)


def draw_metadata(pdf, project_item):
    pdf.set_font('ArialNarrow', size=9)

    pdf.line(10, 271, 225, 271)

    # Дополнительная информация справа
    pdf.set_xy(15, 269)
    pdf.cell(0, 10, 'Дополн. информация:')
    pdf.set_xy(15, 276)
    pdf.multi_cell(0, 3.5, get_comment(project_item))


def get_weight(project_item):
    value = project_item.original_item.weight

    if value:
        return str(round(value, 2))
    else:
        return ''


def draw_specifications(pdf, project_item):
    pdf.set_font('ArialNarrow', size=9)

    x_start = 225
    y_start = 201

    pdf.line(x_start, y_start, x_start, y_start + 8)
    pdf.line(x_start + 8.5, y_start, x_start + 8.5, y_start + 8)
    pdf.line(x_start + 16.5, y_start, x_start + 16.5, y_start + 8)
    pdf.line(x_start + 73, y_start, x_start + 73, y_start + 8)
    pdf.line(x_start + 107, y_start, x_start + 107, y_start + 8)
    pdf.line(x_start + 126, y_start, x_start + 126, y_start + 8)
    pdf.line(x_start + 162, y_start, x_start + 162, y_start + 8)
    pdf.line(x_start + 174, y_start, x_start + 174, y_start + 8)

    pdf.line(x_start, y_start, WIDTH - 10, y_start)

    pdf.set_xy(x_start, y_start + 2)
    pdf.cell(0, 3, 'Поз.')
    pdf.set_xy(x_start + 8.5, y_start + 2)
    pdf.cell(0, 3, 'Кол.')
    pdf.set_xy(x_start + 16.5, y_start + 2)
    pdf.cell(0, 3, 'Комплектующие / размеры')
    pdf.set_xy(x_start + 73, y_start + 2)
    pdf.cell(0, 3, 'Материал')
    pdf.set_xy(x_start + 107, y_start + 2)
    pdf.cell(0, 3, 'DIN EN 10204')
    pdf.set_xy(x_start + 126, y_start + 1)
    pdf.multi_cell(0, 3, '№ чертежа / стандарта\n(Примечания)')
    pdf.set_xy(x_start + 162, y_start + 1)
    pdf.multi_cell(0, 3, 'WI-\nМат-л №')
    pdf.set_xy(x_start + 174, y_start + 1)
    pdf.multi_cell(0, 3, 'Вес\n(kg)')

    pdf.line(x_start, y_start - 5, x_start, y_start + 3)
    pdf.line(x_start + 162, y_start - 5, x_start + 162, y_start + 3)
    pdf.line(x_start + 174, y_start - 5, x_start + 174, y_start + 3)
    pdf.line(x_start, y_start - 5, WIDTH - 10, y_start - 5)

    pdf.set_xy(x_start + 145, y_start - 4)
    pdf.multi_cell(0, 3, 'Изделие')
    pdf.set_xy(x_start + 174, y_start - 4)
    pdf.multi_cell(0, 3, get_weight(project_item))

    composition_objects = TemporaryComposition.objects.filter(tmp_parent=project_item.original_item)

    for index, obj in enumerate(composition_objects):
        line_minus = 5 * (index + 2)
        pdf.line(x_start, y_start - line_minus, x_start, y_start + 5 - line_minus)
        pdf.line(x_start + 8.5, y_start - line_minus, x_start + 8.5, y_start + 5 - line_minus)
        pdf.line(x_start + 16.5, y_start - line_minus, x_start + 16.5, y_start + 5 - line_minus)
        pdf.line(x_start + 73, y_start - line_minus, x_start + 73, y_start + 5 - line_minus)
        pdf.line(x_start + 107, y_start - line_minus, x_start + 107, y_start + 5 - line_minus)
        pdf.line(x_start + 126, y_start - line_minus, x_start + 126, y_start + 5 - line_minus)
        pdf.line(x_start + 162, y_start - line_minus, x_start + 162, y_start + 5 - line_minus)
        pdf.line(x_start + 174, y_start - line_minus, x_start + 174, y_start + 5 - line_minus)

        pdf.line(x_start, y_start - line_minus, WIDTH - 10, y_start - line_minus)

        pdf.set_xy(x_start, y_start - line_minus + 1)
        pdf.cell(0, 3, get_specification_position(obj))
        pdf.set_xy(x_start + 8.5, y_start - line_minus + 1)
        pdf.cell(0, 3, get_specification_count(obj))
        pdf.set_xy(x_start + 16.5, y_start - line_minus + 1)
        pdf.cell(0, 3, get_specification_name(obj))
        pdf.set_xy(x_start + 73, y_start - line_minus + 1)
        pdf.cell(0, 3, get_specification_material(obj))
        pdf.set_xy(x_start + 107, y_start - line_minus + 1)
        pdf.cell(0, 3, '')
        pdf.set_xy(x_start + 126, y_start - line_minus + 1)
        pdf.multi_cell(0, 3, '')
        pdf.set_xy(x_start + 162, y_start - line_minus + 1)
        pdf.multi_cell(0, 3, '')
        pdf.set_xy(x_start + 174, y_start - line_minus + 1)


def draw_attributes(pdf, project_item, created_by, created_date):
    pdf.set_font('ArialNarrow', size=9)

    x_start = 225
    y_start = 206

    pdf.line(x_start, y_start + 3, WIDTH - 10, y_start + 3)
    pdf.line(x_start, y_start + 3, x_start, y_start + 3 + 5)
    pdf.line(x_start, y_start + 7, WIDTH - 10, y_start + 7)
    pdf.line(x_start, y_start + 7, x_start, HEIGHT - 10)
    pdf.line(x_start + 37, y_start + 7, x_start + 37, HEIGHT - 10)
    pdf.line(x_start + 73, y_start + 7, x_start + 73, HEIGHT - 10)
    pdf.line(x_start + 129.5, y_start + 7, x_start + 129.5, HEIGHT - 10)

    pdf.set_xy(x_start, y_start)
    pdf.cell(0, 10, 'Примечания:')

    pdf.set_xy(x_start + 125, y_start)
    pdf.cell(0, 10, f'Расчетное состояние: {project_item.get_estimated_state_display()}')

    pdf.set_xy(x_start, y_start + 5)
    pdf.cell(0, 10, f'DN трубы: {get_nominal_diameter(project_item)}')

    pdf.set_xy(x_start, y_start + 9)
    pdf.cell(0, 10, f'Диам. трубы: {get_nominal_diameter_size(project_item)}')
    pdf.set_xy(x_start + 30, y_start + 9)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start, y_start + 13)
    pdf.cell(0, 10, f'Толщ. изол.: {get_insulation_thickness(project_item)}')
    pdf.set_xy(x_start + 30, y_start + 13)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start, y_start + 17)
    pdf.cell(0, 10, f'Темп.среды: {get_ambient_temperature(project_item)}')
    pdf.set_xy(x_start + 30, y_start + 17)
    pdf.cell(0, 10, '°C')

    pdf.set_xy(x_start, y_start + 21)
    pdf.cell(0, 10, 'Угол наклона: 0')
    pdf.set_xy(x_start + 30, y_start + 21)
    pdf.cell(0, 10, '°')

    pdf.set_xy(x_start, y_start + 26)
    pdf.cell(0, 10, 'Перемещение:')

    pdf.set_xy(x_start + 5, y_start + 30)
    pdf.cell(0, 10, f'X: -{get_float(project_item, "move_minus_x", default="0")}/+{get_float(project_item, "move_plus_x", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 30)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start + 5, y_start + 34)
    pdf.cell(0, 10, f'Y: -{get_float(project_item, "move_minus_y", default="0")}/+{get_float(project_item,  "move_plus_y", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 34)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start + 5, y_start + 38)
    pdf.cell(0, 10, f'Z: -{get_float(project_item, "move_minus_z", default="0")}/+{get_float(project_item, "move_plus_z", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 38)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start, y_start + 43)
    pdf.cell(0, 10, 'Нагрузка:')

    pdf.set_xy(x_start + 5, y_start + 47)
    pdf.cell(0, 10, f'X: -{get_float(project_item, "load_minus_x", default="0")}/+{get_float(project_item, "load_plus_x", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 47)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 5, y_start + 51)
    pdf.cell(0, 10, f'Y: -{get_float(project_item, "load_minus_y", default="0")}/+{get_float(project_item, "load_plus_y", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 51)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 5, y_start + 55)
    pdf.cell(0, 10, f'Z: -{get_float(project_item, "load_minus_z", default="0")}/+{get_float(project_item, "load_plus_z", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 55)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start, y_start + 60)
    pdf.cell(0, 10, 'Испытательная нагрузка:')

    pdf.set_xy(x_start + 5, y_start + 64)
    pdf.cell(0, 10, f'X: {get_float(project_item, "test_load_x", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 64)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 5, y_start + 68)
    pdf.cell(0, 10, f'Y: {get_float(project_item, "test_load_y", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 68)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 5, y_start + 72)
    pdf.cell(0, 10, f'Z: {get_float(project_item, "test_load_z", default="0")}')
    pdf.set_xy(x_start + 30, y_start + 72)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 37, y_start + 5)
    pdf.cell(0, 10, 'Нагрузка на сторону')

    pdf.set_xy(x_start + 37, y_start + 8)
    pdf.cell(0, 10, f'Горяч. нагр.: {get_float(project_item, "hot_load", default="0")}')
    pdf.set_xy(x_start + 68, y_start + 8)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 37, y_start + 12)
    pdf.cell(0, 10, f'Холод. нагр.: {get_float(project_item, "cold_load", default="0")}')
    pdf.set_xy(x_start + 68, y_start + 12)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 37, y_start + 16)
    pdf.cell(0, 10, f'Жестк. пруж.: {get_int(project_item, "spring_stiffness", default="0")}')
    pdf.set_xy(x_start + 64, y_start + 16)
    pdf.cell(0, 10, 'N/mm')

    pdf.line(x_start + 37, y_start + 25, x_start + 73, y_start + 25)

    pdf.set_xy(x_start + 37, y_start + 23)
    pdf.cell(0, 10, f'Измен. нагр.: {get_float(project_item, "load_change", default="0")}')
    pdf.set_xy(x_start + 68, y_start + 23)
    pdf.cell(0, 10, '%')

    pdf.set_xy(x_start + 37, y_start + 27)
    pdf.cell(0, 10, f'Регул-ка нагр.: {get_float(project_item, "load_adjustment", default="-")}')
    pdf.set_xy(x_start + 68, y_start + 27)
    pdf.cell(0, 10, '%')

    pdf.set_xy(x_start + 37, y_start + 32)
    pdf.cell(0, 10, 'Запас хода пружины')

    pdf.set_xy(x_start + 37, y_start + 36)
    pdf.cell(0, 10, f'вверх: {get_int(project_item, "spring_travel_up", default="-")}')
    pdf.set_xy(x_start + 68, y_start + 36)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start + 37, y_start + 42)
    pdf.cell(0, 10, f'вниз: {get_int(project_item, "spring_travel_down", default="-")}')
    pdf.set_xy(x_start + 68, y_start + 42)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start + 37, y_start + 49)
    pdf.cell(0, 10, f'Диапаз.рег-ки: {get_int(project_item, "regulation_range_plus", default="-")}')
    pdf.set_xy(x_start + 68, y_start + 49)
    pdf.cell(0, 10, 'mm')

    pdf.line(x_start + 37, y_start + 63, x_start + 73, y_start + 63)

    pdf.set_xy(x_start + 56, y_start + 52)
    pdf.cell(0, 10, get_int(project_item, "regulation_range_minus", default="-"))
    pdf.set_xy(x_start + 68, y_start + 52)
    pdf.cell(0, 10, 'mm')

    pdf.set_xy(x_start + 37, y_start + 60)
    pdf.cell(0, 10, 'Вес грузовой цепи:')

    pdf.set_xy(x_start + 56, y_start + 63)
    pdf.cell(0, 10, get_float(project_item, "chain_weight", default="0"))
    pdf.set_xy(x_start + 68, y_start + 63)
    pdf.cell(0, 10, 'kN')

    pdf.set_xy(x_start + 37, y_start + 67)
    pdf.cell(0, 10, 'Допол. вес:')

    pdf.set_xy(x_start + 56, y_start + 70)
    pdf.cell(0, 10, '0')
    pdf.set_xy(x_start + 68, y_start + 70)
    pdf.cell(0, 10, 'kN')

    pdf.line(x_start + 73, y_start + 20, WIDTH - 10, y_start + 20)
    pdf.line(x_start + 73, y_start + 25, WIDTH - 10, y_start + 25)
    pdf.line(x_start + 73, y_start + 30, WIDTH - 10, y_start + 30)
    pdf.line(x_start + 73, y_start + 35, WIDTH - 10, y_start + 35)

    pdf.line(x_start + 95, y_start + 20, x_start + 95, y_start + 35)
    pdf.line(x_start + 105, y_start + 20, x_start + 105, y_start + 35)
    pdf.line(x_start + 118, y_start + 20, x_start + 118, y_start + 35)

    pdf.set_xy(x_start + 95, y_start + 17.5)
    pdf.cell(0, 10, 'Итого:')
    pdf.set_xy(x_start + 105, y_start + 17.5)
    pdf.cell(0, 10, 'Y:')
    pdf.set_xy(x_start + 120, y_start + 17.5)
    pdf.cell(0, 10, 'X:')

    pdf.set_xy(x_start + 73, y_start + 22.5)
    pdf.cell(0, 10, 'отклон. от Z [°]')

    pdf.set_xy(x_start + 73, y_start + 27.5)
    pdf.cell(0, 10, 'Компенсация [%]')

    pdf.set_xy(x_start + 73, y_start + 35)
    pdf.cell(0, 10, 'Заказчик')

    pdf.set_xy(x_start + 73, y_start + 45)
    pdf.cell(0, 10, 'Проект:')

    pdf.set_xy(x_start + 73, y_start + 55)
    pdf.cell(0, 10, 'Проект заказчика:')

    pdf.set_xy(x_start + 73, y_start + 65)
    pdf.cell(0, 10, '№ ОЛ заказчика:')

    pdf.image(get_witzenmann_logo(), x=x_start + 128, y=y_start, w=56)

    pdf.set_xy(x_start + 130, y_start + 27.5)
    pdf.cell(0, 10, 'Кол-во штук:')

    pdf.set_xy(x_start + 175, y_start + 27.5)
    pdf.cell(0, 10, f'{project_item.count}')

    pdf.set_xy(x_start + 130, y_start + 54.5)
    pdf.cell(0, 10, 'Подготовил:')

    pdf.set_xy(x_start + 155, y_start + 54.5)
    pdf.cell(0, 10, get_str(created_by.last_name))

    pdf.set_xy(x_start + 130, y_start + 59.5)
    pdf.cell(0, 10, 'Дата:')

    pdf.set_xy(x_start + 155, y_start + 59.5)
    pdf.cell(0, 10, get_str(created_date))

    pdf.line(x_start + 129.5, y_start + 57, WIDTH - 10, y_start + 57)
    pdf.line(x_start + 129.5, y_start + 62, WIDTH - 10, y_start + 62)
    pdf.line(x_start + 129.5, y_start + 67, WIDTH - 10, y_start + 67)


def render_sketch_pdf(
    project_item,
    created_by,
    composition_type='temporary_composition',
    field_name="sketch",
    coords_field_name="sketch_coords",
):
    if not project_item.original_item.variant.sketch:
        raise Exception('У выбранного типа продукта не заведен эскиз.')

    if composition_type == 'temporary_composition':
        composition_objects = TemporaryComposition.objects.filter(tmp_parent=project_item.original_item)
    else:
        composition_objects = project_item.original_item.children.all()

    today = date.today().strftime('%d.%m.%y')
    last_name = created_by.last_name
    double = project_item.original_item.type.branch_qty == DetailType.BranchQty.TWO

    # Создание PDF
    pdf = FPDF(orientation='L', unit='mm', format='A3')
    pdf.set_auto_page_break(auto=False, margin=0)
    pdf.add_font('ArialNarrow', '', finders.find('fonts/ArialNarrow.ttf'), uni=True)
    pdf.add_font('ArialNarrow', 'B', finders.find('fonts/ArialNarrow.ttf'), uni=True)
    pdf.set_font('ArialNarrow', size=10)
    pdf.add_page()

    draw_main(pdf, project_item, double, field_name, coords_field_name)
    draw_metadata(pdf, project_item)
    draw_attributes(pdf, project_item, created_by, today)
    draw_specifications(pdf, project_item)

    # Сохранение PDF
    tz = pytz.timezone('Europe/Moscow')
    when_formed = datetime.now(tz).strftime('%d.%m.%y_%H.%M.%S')
    filename = f'{project_item.position_number}_{project_item.project.number}_{when_formed}.pdf'

    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp_file:
        pdf.output(tmp_file.name, dest='F')
        tmp_image_path = tmp_file.name

    with open(tmp_image_path, 'rb') as f:
        pdf_output = f.read()
    return pdf_output, filename