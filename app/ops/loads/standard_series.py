from typing import List, Tuple, Optional

from ops.loads.utils import SpringStiffness, Load

LOAD_GROUP_LGV_LIST = (12, 12, 12, 12, 12, 16, 20, 24, 30, 36, 42, 48, 64, 72, 80, 90)
MAX_SIZE = len(LOAD_GROUP_LGV_LIST)


def load_iterator(rated_stroke_50, rated_stroke_100, rated_stroke_200, design_loads):
    total = len(design_loads)
    loads = []

    for index in range(total):
        size = index + 1
        load_group_lgv = LOAD_GROUP_LGV_LIST[index]
        design_load = design_loads[index]

        loads.append(
            Load(size, rated_stroke_50, rated_stroke_100, rated_stroke_200, load_group_lgv, design_load)
        )

    return loads


#  TODO на мой взгляд, для loads нужно сохранить размер, нагрузочную группу, мин и макс нагрузки. Сейчас у нас сохранены рассчитываемые значения.
#  В принципе сразу можно добавить и жесткости и номинальный ход, но они и отдельно хорошо смотрятся.


LOADS = []
LOADS += load_iterator(0, 0, 0,
                       (0.16, 0.32, 0.66, 1.30, 2.30, 3.90, 6.60, 10.9, 16.5, 23.0, 33.0, 43.6, 66.0, 92.0, 132, 165))
LOADS += load_iterator(2.5, 5, 10,
                       (0.18, 0.35, 0.73, 1.44, 2.54, 4.31, 7.27, 12.0, 18.2, 25.4, 36.4, 48.0, 72.7, 101, 145, 182))
LOADS += load_iterator(5.0, 10, 20,
                       (0.19, 0.39, 0.79, 1.57, 2.77, 4.71, 7.94, 13.1, 19.9, 27.7, 39.7, 52.4, 79.4, 111, 159, 199))
LOADS += load_iterator(7.5, 15, 30,
                       (0.21, 0.42, 0.86, 1.71, 3.01, 5.12, 8.61, 14.2, 21.5, 30.1, 43.1, 56.9, 86.1, 120, 172, 215))
LOADS += load_iterator(10.0, 20, 40,
                       (0.23, 0.46, 0.93, 1.84, 3.24, 5.52, 9.28, 15.3, 23.2, 32.4, 46.4, 61.3, 92.8, 130, 186, 232))
LOADS += load_iterator(12.5, 25, 50,
                       (0.25, 0.49, 1.00, 1.98, 3.48, 5.93, 9.95, 16.4, 24.9, 34.8, 49.8, 65.7, 99.5, 139, 199, 249))
LOADS += load_iterator(15.0, 30, 60,
                       (0.26, 0.52, 1.06, 2.11, 3.71, 6.33, 10.6, 17.5, 26.6, 37.1, 53.1, 70.1, 106, 148, 212, 266))
LOADS += load_iterator(17.5, 35, 70,
                       (0.28, 0.56, 1.13, 2.25, 3.95, 6.74, 11.3, 18.6, 28.2, 39.5, 56.5, 74.5, 113, 158, 226, 282))
LOADS += load_iterator(20.0, 40, 80,
                       (0.30, 0.59, 1.20, 2.38, 4.18, 7.14, 12.0, 19.7, 29.9, 41.8, 59.8, 79.0, 120, 167, 239, 299))
LOADS += load_iterator(22.5, 45, 90,
                       (0.31, 0.63, 1.26, 2.52, 4.42, 7.55, 12.6, 20.8, 31.6, 44.2, 63.2, 83.4, 126, 177, 253, 316))
LOADS += load_iterator(25.0, 50, 100,
                       (0.33, 0.66, 1.33, 2.65, 4.65, 7.95, 13.3, 22.0, 33.3, 46.5, 66.5, 87.8, 133, 186, 266, 333))
LOADS += load_iterator(27.5, 55, 110,
                       (0.35, 0.69, 1.40, 2.79, 4.89, 8.36, 14.0, 23.1, 34.9, 48.9, 69.9, 92.2, 140, 195, 279, 349))
LOADS += load_iterator(30.0, 60, 120,
                       (0.36, 0.73, 1.46, 2.92, 5.12, 8.76, 14.6, 24.2, 36.6, 51.2, 73.2, 96.6, 146, 205, 293, 366))
LOADS += load_iterator(32.5, 65, 130,
                       (0.38, 0.76, 1.53, 3.06, 5.36, 9.17, 15.3, 25.3, 38.3, 53.6, 76.6, 101, 153, 214, 306, 383))
LOADS += load_iterator(35.0, 70, 140,
                       (0.40, 0.80, 1.60, 3.19, 5.59, 9.57, 16.0, 26.4, 40.0, 55.9, 79.9, 105, 160, 224, 320, 400))
LOADS += load_iterator(37.5, 75, 150,
                       (0.42, 0.83, 1.67, 3.33, 5.83, 9.98, 16.7, 27.5, 41.6, 58.3, 83.3, 110, 167, 233, 333, 416))
LOADS += load_iterator(40.0, 80, 160,
                       (0.43, 0.86, 1.73, 3.46, 6.06, 10.4, 17.3, 28.6, 43.3, 60.6, 86.6, 114, 173, 242, 346, 433))
LOADS += load_iterator(42.5, 85, 170,
                       (0.45, 0.90, 1.80, 3.60, 6.30, 10.8, 18.0, 29.7, 45.0, 63.0, 90.0, 119, 180, 252, 360, 450))
LOADS += load_iterator(45.0, 90, 180,
                       (0.47, 0.93, 1.87, 3.73, 6.53, 11.2, 18.7, 30.8, 46.7, 65.3, 93.3, 123, 187, 261, 373, 467))
LOADS += load_iterator(47.5, 95, 190,
                       (0.48, 0.97, 1.93, 3.87, 6.77, 11.6, 19.3, 31.9, 48.3, 67.7, 96.7, 128, 193, 271, 387, 483))
LOADS += load_iterator(50.0, 100, 200,
                       (0.50, 1.00, 2.00, 4.00, 7.00, 12.0, 20.0, 33.0, 50.0, 70.0, 100, 132, 200, 280, 400, 500))


def stiffness_iterator(rated_stroke: int, values: Tuple[Optional[float], ...]) -> List[SpringStiffness]:
    """
    Подготавливает список объектов SpringStiffness на основе заданного номинального хода и кортежа значений жесткости.

    Args:
        rated_stroke (int): Номинальный ход для пружин.
        values (Tuple[Optional[float], ...]): Кортеж, содержащий значения жесткости для различных размеров.
                                              Если значение отсутствует, оно должно быть установлено в None.

    Returns:
        List[SpringStiffness]: Список объектов SpringStiffness, созданных на основе входных значений.
    """
    stiffness_list = []

    for index, value in enumerate(values):
        size = index + 1
        stiffness_list.append(SpringStiffness(size, rated_stroke, value))

    return stiffness_list


# Список жесткости пружин R
SPRING_STIFFNESS_LIST = []
SPRING_STIFFNESS_LIST += stiffness_iterator(50, (
    6.8, 13.6, 26.8, 54.0, 94.0, 162.0, 268.0, 442.0, 670.0, 940, 1340, 1768, 2680, 3760, 5360, 6700))
SPRING_STIFFNESS_LIST += stiffness_iterator(100, (
    3.4, 6.8, 13.4, 27.0, 47.0, 81.0, 134.0, 221.0, 335.0, 470, 670, 884, 1340, 1880, 2680, 3350))
SPRING_STIFFNESS_LIST += stiffness_iterator(200, (
    1.7, 3.4, 6.7, 13.5, 23.5, 40.5, 67, 110.5, 167.5, 235, 335, 442, 670, 940, 1340, 1675))
